<application>
  <component name="AppStorage">
    <histories>
      <item value="tv daily task" />
      <item value="room Processor" />
      <item value="computation" />
      <item value="/** * Call this when something has changed which has invalidated the * layout of this view. This will schedule a layout pass of the view * tree. This should not be called while the view hierarchy is currently in a layout * pass ({@link #isInLayout()}. If layout is happening, the request may be honored at the * end of the current layout pass (and then layout will run again) or after the current * frame is drawn and the next layout occurs. * * &lt;p&gt;Subclasses which override this method should call the superclass method to * handle possible request-during-layout errors correctly.&lt;/p&gt; */" />
      <item value="Initialize the current thread as a looper. This gives you a chance to create handlers that then reference this" />
      <item value="Surface aspect ratio denominator" />
      <item value="sar Den" />
      <item value="EXTRA STREAM" />
      <item value="* Asynchronously subscribes Observers to this ObservableSource on the specified {@link Scheduler}." />
      <item value="Asynchronously" />
      <item value="This is particularly important for main thread delivery and registrations bound to the * live cycle of an Activity or Fragment." />
      <item value="Skipping subscriptions prevents race conditions * between {@link #unregister(Object)} and event delivery." />
      <item value="launch" />
      <item value="* Creates a localized description of this throwable. * Subclasses may override this method in order to produce a * locale-specific message. For subclasses that do not override this * method, the default implementation returns the same result as * {@code getMessage()}." />
      <item value="* OnConflict strategy constant to replace the old data and continue the transaction." />
      <item value="coroutine Scope" />
      <item value="Coroutine Worker" />
      <item value="populate" />
      <item value="DISTINCT" />
      <item value="clip Path" />
      <item value="* A Card view that clips the content of any shape, this should be done upstream in card, * working around it for now." />
      <item value="* Determines if the plant should be watered. Returns true if [since]'s date &gt; date of last * watering + watering Interval; false otherwise." />
      <item value="Embedded" />
      <item value="Staggered grids are likely to have gaps at the edges of the layout. To avoid these gaps, * StaggeredGridLayoutManager can offset spans independently or move items between spans. You can * control this behavior via {@link #setGapStrategy(int)}. */" />
      <item value="A LayoutManager that lays out children in a staggered grid formation. * It supports horizontal &amp; vertical layout as well as an ability to layout children in reverse. * &lt;p&gt;" />
      <item value="Staggered Grid Layout Manager" />
      <item value="garden" />
      <item value="snap" />
      <item value="Coordinator Layout" />
      <item value="ViewPager2 replaces {@link androidx.viewpager.widget.ViewPager}, addressing most of its * predecessor’s pain-points, including right-to-left layout support, vertical orientation, * modifiable Fragment collections, etc." />
      <item value="следующий" />
      <item value="Wiedergabe" />
      <item value="uses Cleartext Traffic" />
      <item value="hotspot" />
      <item value="This provider combines inputs for all possible location sources * to provide the best possible Location fix. It is implicitly * used for all API's that involve the {@link LocationRequest} * object." />
      <item value="* Name of the Fused location provider." />
      <item value="Requires the permission * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}, although if the GPS is * not enabled this provider might only return coarse fixes." />
      <item value="You can query the {@link Location#getProvider()} method to determine * the origin of the location update." />
      <item value="This provider will return locations generated by other * providers." />
      <item value="&gt;This provider can be used to passively receive location updates * when other applications or services request them without actually requesting * the locations yourself." />
      <item value="A special location provider for receiving locations without actually initiating * a location fix. *" />
      <item value="Prior" />
      <item value="Prior to {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}, this method * always returned the SSID with no quotes around it." />
      <item value="is Satation" />
      <item value="STATION IP" />
      <item value="minimum time interval between location updates, in milliseconds" />
      <item value="toggle visibility of listen_order_button while WebSocket connect or disconnected" />
      <item value="* Root VLC object of the objects tree that this object belongs in." />
      <item value="/** Module probe flag * * A boolean during module probing when the probe is &quot;forced&quot;. * See \ref module_need()." />
      <item value="Common public properties for all VLC objects. * Object also have private properties maintained by the core, see * \ref vlc_object_internals_t" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="139" />
        <entry key="ENGLISH" value="140" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="SWEDISH" value="1" />
      </map>
    </option>
  </component>
</application>