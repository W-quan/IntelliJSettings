<application>
  <component name="AppStorage">
    <histories>
      <item value="m Decorated Measurement In Other" />
      <item value="calling LayoutManager here is not pretty but that API is already public and it is better // than creating another method since this is internal." />
      <item value="This specific call should be considered deprecated and replaced with * {@link #defaultOnMeasure(int, int)}. It can't actually be replaced as it could * break existing third party code but all documentation directs developers to not * override {@link LayoutManager#onMeasure(int, int)} when * {@link LayoutManager#isAutoMeasureEnabled()} returns true. */" />
      <item value="If your use of RecyclerView falls into this category, set this to {@code true}. It will allow * RecyclerView to avoid invalidating the whole layout when its adapter contents change. *" />
      <item value="RecyclerView can perform several optimizations if it can know in advance that RecyclerView's * size is not affected by the adapter contents. RecyclerView can still change its size based * on other factors (e.g. its parent's size) but this size calculation cannot depend on the * size of its children or contents of its adapter (except the number of items in the adapter)." />
      <item value="Implementors of LayoutManager should define whether or not it uses * AutoMeasure by overriding {@link #isAutoMeasureEnabled()}. */" />
      <item value="if layout measurement should be done by the * RecyclerView, &lt;code&gt;false&lt;/code&gt; if it should be done by this * LayoutManager." />
      <item value="Defines whether the measuring pass of layout should use the AutoMeasure mechanism of * {@link RecyclerView} or if it should be done by the LayoutManager's implementation of * {@link LayoutManager#onMeasure(Recycler, State, int, int)}. *" />
      <item value="This method returns false by default (it actually returns the value passed to the * deprecated {@link #setAutoMeasureEnabled(boolean)}) and should be overridden to return * true if a LayoutManager wants to be auto measured by the RecyclerView." />
      <item value="Returns whether the measuring pass of layout should use the AutoMeasure mechanism of * {@link RecyclerView} or if it should be done by the LayoutManager's implementation of * {@link LayoutManager#onMeasure(Recycler, State, int, int)}." />
      <item value="The default implementation will handle EXACTLY measurements and respect * the minimum width and height properties of the host RecyclerView if measured * as UNSPECIFIED. AT_MOST measurements will be treated as EXACTLY and the RecyclerView * will consume all available space." />
      <item value="It is strongly advised to use the AutoMeasure mechanism by overriding * {@link #isAutoMeasureEnabled()} to return true as AutoMeasure handles all the standard * measure cases including when the RecyclerView's layout_width or layout_height have been * set to wrap_content. If {@link #isAutoMeasureEnabled()} is overridden to return true, * this method should not be overridden." />
      <item value="This method must be called by {@link #onMeasure(int, int)} to store the * measured width and measured height. Failing to do so will trigger an * exception at measurement time." />
      <item value="m Layout Frozen" />
      <item value="m Intercept Request Layout Depth" />
      <item value="If your use of RecyclerView falls into this category, set this to {@code true}. It will allow * RecyclerView to avoid invalidating the whole layout when its adapter contents change. * * @param hasFixedSize true if adapter changes cannot affect the size of the RecyclerView. */" />
      <item value="with Cross Fade" />
      <item value="enables a cross fade animation" />
      <item value="filter" />
      <item value="Appedner Mode Async" />
      <item value="don't show order if don't have location" />
      <item value="don't show order if no location" />
      <item value="ยก" />
      <item value="request api when open quick_settings every time." />
      <item value="INSTALL FAILED CONFLICTING PROVIDER" />
      <item value="change the promo name if the discount &gt;= 10 when publish a new promo" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="20" />
        <entry key="ENGLISH" value="21" />
      </map>
    </option>
  </component>
</application>