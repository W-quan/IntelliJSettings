<application>
  <component name="AppStorage">
    <histories>
      <item value="* SnapHelper tries to handle fling as well but for this to work properly, the * {@link RecyclerView.LayoutManager} must implement the {@link RecyclerView.SmoothScroller.ScrollVectorProvider} interface or * you should override {@link #onFling(int, int)} and handle fling manually." />
      <item value="* Class intended to support snapping for a {@link RecyclerView}." />
      <item value="sort" />
      <item value="Home Foot Print Fragment" />
      <item value="Duration" />
      <item value="curr Duration" />
      <item value="TYPE VERIFIED" />
      <item value="TYPE NO SUBMITTED" />
      <item value="TYPE NO" />
      <item value="ellipsize" />
      <item value="column" />
      <item value="INDIVIDUAL" />
      <item value="decorate" />
      <item value="birth" />
      <item value="Bottle" />
      <item value="payload" />
      <item value="battle" />
      <item value="ic voice battle play" />
      <item value="play" />
      <item value="ffc 808" />
      <item value="head" />
      <item value="Media" />
      <item value="set Compound Drawables Relative With Intrinsic Bounds" />
      <item value="Praise Event" />
      <item value="* Returns a view of the portion of this list between the specified * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive. (If * {@code fromIndex} and {@code toIndex} are equal, the returned list is * empty.) The returned list is backed by this list, so non-structural * changes in the returned list are reflected in this list, and vice-versa. * The returned list supports all of the optional list operations." />
      <item value="EXPEND" />
      <item value="* &lt;li&gt;As a container for a specific interaction with one or more child views&lt;/li&gt;" />
      <item value="* &lt;li&gt;As a top-level application decor or chrome layout&lt;/li&gt;" />
      <item value="基础资料" />
      <item value="info" />
      <item value="支持自定义hintview" />
      <item value="parallax" />
      <item value="* Retrieve a dimensional unit attribute at &lt;var&gt;index&lt;/var&gt; for use * as a size in raw pixels. This is the same as * {@link #getDimension}, except the returned value is converted to * integer pixels for use as a size. A size conversion involves * rounding the base value, and ensuring that a non-zero base value * is at least one pixel in size. * &lt;p&gt;" />
      <item value="* Geometry and text drawn with this style will be filled, ignoring all * stroke-related settings in the paint." />
      <item value="* Geometry and text drawn with this style will be both filled and * stroked at the same time, respecting the stroke-related fields on * the paint. This mode can give unexpected results if the geometry * is oriented counter-clockwise. This restriction does not apply to * either FILL or STROKE." />
      <item value="Ambient" />
      <item value="Color" />
      <item value="constellation" />
      <item value="level value" />
      <item value="count" />
      <item value="charm" />
      <item value="Url" />
      <item value="attention" />
      <item value="* &lt;li&gt;Ongoing notifications do not have an 'X' close button, and are not affected * by the &quot;Clear all&quot; button." />
      <item value="* &lt;li&gt;Ongoing notifications are sorted above the regular notifications in the * notification panel.&lt;/li&gt;" />
      <item value="set Ongoing" />
      <item value="* &lt;p&gt;This method is appropriate for resources that will be used outside of the normal fragment or * activity lifecycle (For example in services, or for notification thumbnails)." />
      <item value="* &lt;p&gt;Any requests started using a context will only have the application level options applied * and will not be started or stopped based on lifecycle events. In general, loads should be" />
      <item value="* Min notification importance: only shows in the shade, below the fold. This should * not be used with {@link Service#startForeground(int, Notification) Service.startForeground} * since a foreground service is supposed to be something the user cares about so it does * not make semantic sense to mark its notification as minimum importance. If you do this * as of Android version {@link android.os.Build.VERSION_CODES#O}, the system will show * a higher-priority notification about your app running in the background." />
      <item value="* On some platforms, a notification that is noisy is more likely to be presented * as a heads-up notification." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="372" />
        <entry key="ENGLISH" value="373" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="SWEDISH" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="4b8c0dd3e2395c8d" />
      </youdao-translate>
    </option>
  </component>
</application>