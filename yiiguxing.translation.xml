<application>
  <component name="AppStorage">
    <histories>
      <item value="* Returns an immutable list containing only the specified object. * The returned list is serializable." />
      <item value="* Provides an API (via a cold Single) that bridges the reactive world with the callback-style world." />
      <item value="* The size is adjusted based on the current rotation of the display." />
      <item value="* Gets display metrics based on the real size of this display." />
      <item value="Make sure all annotation processors are incremental to improve your build speed." />
      <item value="incremental" />
      <item value="* Create a new component identifier from a Context and Class object." />
      <item value="¡" />
      <item value="retrieving playback state and metadata changes" />
      <item value="controlling the session via transport controls" />
      <item value="Creating a MediaController for the current media session which can be used by view models for:" />
      <item value="Allowing view models to retrieve the list of albums and songs by subscribing to changes in the MusicService's list of media items via subscribe" />
      <item value="wrapper" />
      <item value="singleton" />
      <item value="This is achieved using LiveData types." />
      <item value="The Activity and Fragments are backed by their own view models. The view model represents the underlying state of the corresponding view. When the model changes, such as" />
      <item value="achieved" />
      <item value="reflect" />
      <item value="corresponding" />
      <item value="underlying" />
      <item value="separation" />
      <item value="UAMP achieves this by using a Model-View-ViewModel architecture. This allows a separation of responsibilities between each layer." />
      <item value="see changes in the underlying player, such as playback duration" />
      <item value="Preparing media sources from URIs using UampPlaybackPreparer" />
      <item value="glue" />
      <item value="Diagram" />
      <item value="communicate" />
      <item value="It provides various mechanisms for controlling playback, receiving status updates and retrieving metadata about the current media." />
      <item value="represents an ongoing media playback session" />
      <item value="decoupling playback from the app's UI." />
      <item value="decoupling" />
      <item value="discover" />
      <item value="banner" />
      <item value="修复直播列表Banner间距问题" />
      <item value="set Hint View" />
      <item value="Specifies the radius for the corners of the gradient. If this is &gt; 0, * then the drawable is drawn in a round-rectangle, rather than a * rectangle. This property is honored only when the shape is of type * {@link #RECTANGLE}." />
      <item value="volatile" />
      <item value="Room Charm Rank View" />
      <item value="unregister" />
      <item value="mutate" />
      <item value="against" />
      <item value="guard" />
      <item value="iterator" />
      <item value="detached" />
      <item value="tv daily task" />
      <item value="room Processor" />
      <item value="computation" />
      <item value="/** * Call this when something has changed which has invalidated the * layout of this view. This will schedule a layout pass of the view * tree. This should not be called while the view hierarchy is currently in a layout * pass ({@link #isInLayout()}. If layout is happening, the request may be honored at the * end of the current layout pass (and then layout will run again) or after the current * frame is drawn and the next layout occurs. * * &lt;p&gt;Subclasses which override this method should call the superclass method to * handle possible request-during-layout errors correctly.&lt;/p&gt; */" />
      <item value="Initialize the current thread as a looper. This gives you a chance to create handlers that then reference this" />
      <item value="Surface aspect ratio denominator" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="157" />
        <entry key="ENGLISH" value="158" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="SWEDISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="4b8c0dd3e2395c8d" />
      </youdao-translate>
    </option>
  </component>
</application>