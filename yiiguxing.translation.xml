<application>
  <component name="AppStorage">
    <histories>
      <item value="banner" />
      <item value="修复直播列表Banner间距问题" />
      <item value="set Hint View" />
      <item value="Specifies the radius for the corners of the gradient. If this is &gt; 0, * then the drawable is drawn in a round-rectangle, rather than a * rectangle. This property is honored only when the shape is of type * {@link #RECTANGLE}." />
      <item value="volatile" />
      <item value="Room Charm Rank View" />
      <item value="unregister" />
      <item value="mutate" />
      <item value="against" />
      <item value="guard" />
      <item value="iterator" />
      <item value="detached" />
      <item value="tv daily task" />
      <item value="room Processor" />
      <item value="computation" />
      <item value="/** * Call this when something has changed which has invalidated the * layout of this view. This will schedule a layout pass of the view * tree. This should not be called while the view hierarchy is currently in a layout * pass ({@link #isInLayout()}. If layout is happening, the request may be honored at the * end of the current layout pass (and then layout will run again) or after the current * frame is drawn and the next layout occurs. * * &lt;p&gt;Subclasses which override this method should call the superclass method to * handle possible request-during-layout errors correctly.&lt;/p&gt; */" />
      <item value="Initialize the current thread as a looper. This gives you a chance to create handlers that then reference this" />
      <item value="Surface aspect ratio denominator" />
      <item value="sar Den" />
      <item value="EXTRA STREAM" />
      <item value="* Asynchronously subscribes Observers to this ObservableSource on the specified {@link Scheduler}." />
      <item value="Asynchronously" />
      <item value="This is particularly important for main thread delivery and registrations bound to the * live cycle of an Activity or Fragment." />
      <item value="Skipping subscriptions prevents race conditions * between {@link #unregister(Object)} and event delivery." />
      <item value="launch" />
      <item value="* Creates a localized description of this throwable. * Subclasses may override this method in order to produce a * locale-specific message. For subclasses that do not override this * method, the default implementation returns the same result as * {@code getMessage()}." />
      <item value="* OnConflict strategy constant to replace the old data and continue the transaction." />
      <item value="coroutine Scope" />
      <item value="Coroutine Worker" />
      <item value="populate" />
      <item value="DISTINCT" />
      <item value="clip Path" />
      <item value="* A Card view that clips the content of any shape, this should be done upstream in card, * working around it for now." />
      <item value="* Determines if the plant should be watered. Returns true if [since]'s date &gt; date of last * watering + watering Interval; false otherwise." />
      <item value="Embedded" />
      <item value="Staggered grids are likely to have gaps at the edges of the layout. To avoid these gaps, * StaggeredGridLayoutManager can offset spans independently or move items between spans. You can * control this behavior via {@link #setGapStrategy(int)}. */" />
      <item value="A LayoutManager that lays out children in a staggered grid formation. * It supports horizontal &amp; vertical layout as well as an ability to layout children in reverse. * &lt;p&gt;" />
      <item value="Staggered Grid Layout Manager" />
      <item value="garden" />
      <item value="snap" />
      <item value="Coordinator Layout" />
      <item value="ViewPager2 replaces {@link androidx.viewpager.widget.ViewPager}, addressing most of its * predecessor’s pain-points, including right-to-left layout support, vertical orientation, * modifiable Fragment collections, etc." />
      <item value="следующий" />
      <item value="Wiedergabe" />
      <item value="uses Cleartext Traffic" />
      <item value="hotspot" />
      <item value="This provider combines inputs for all possible location sources * to provide the best possible Location fix. It is implicitly * used for all API's that involve the {@link LocationRequest} * object." />
      <item value="* Name of the Fused location provider." />
      <item value="Requires the permission * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}, although if the GPS is * not enabled this provider might only return coarse fixes." />
      <item value="You can query the {@link Location#getProvider()} method to determine * the origin of the location update." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="151" />
        <entry key="ENGLISH" value="151" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="SWEDISH" value="1" />
      </map>
    </option>
  </component>
</application>