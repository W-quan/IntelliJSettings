<application>
  <component name="AppStorage">
    <histories>
      <item value="Supervisor Job" />
      <item value="previous" />
      <item value="increments" />
      <item value="add To Next In Play List" />
      <item value="* &lt;p&gt;&lt;em&gt;Warning!&lt;/em&gt; this class is extremely prone to mis-use. Use SimpleTarget only as a last" />
      <item value="* However, for MediaStyle and DecoratedMediaCustomViewStyle notifications * that have a media session attached there is no such requirement." />
      <item value="colorized" />
      <item value="* telling the system not to decorate this notification with any special color but instead use * default colors when presenting this notification." />
      <item value="* Sets the &quot;ticker&quot; text which is sent to accessibility services. Prior to * {@link Build.VERSION_CODES#LOLLIPOP}, sets the text that is displayed in the status bar * when the notification first arrives." />
      <item value="badge" />
      <item value="* Supply custom RemoteViews to use instead of the platform template in the heads up dialog. *" />
      <item value="* &lt;p&gt;Instead of providing a media notification that is completely custom, a developer can set * this style and still obtain system decorations like the notification header with the expand * affordance and actions." />
      <item value="* Notification style for media custom views that are decorated by the system." />
      <item value="extras" />
      <item value="Utility to return a default size. Uses the supplied size if the * MeasureSpec imposed no constraints. Will get larger if allowed * by the MeasureSpec." />
      <item value="* Measure the view and its content to determine the measured width and the * measured height. This method is invoked by {@link #measure(int, int)} and * should be overridden by subclasses to provide accurate and efficient * measurement of their contents." />
      <item value="viewer" />
      <item value="indeterminate" />
      <item value="plate" />
      <item value="* Removes the [NOW_PLAYING_NOTIFICATION] notification. * * Since `stopForeground(false)` was already called (see * [MediaControllerCallback.onPlaybackStateChanged], it's possible to cancel the notification * with `notificationManager.cancel(NOW_PLAYING_NOTIFICATION)` if minSdkVersion is &gt;= * [Build.VERSION_CODES.LOLLIPOP]. * * Prior to [Build.VERSION_CODES.LOLLIPOP], notifications associated with a foreground * service remained marked as &quot;ongoing&quot; even after calling [Service.stopForeground], * and cannot be cancelled normally. * * Fortunately, it's possible to simply call [Service.stopForeground] a second time, this * time with `true`. This won't change anything about the service's state, but will simply * remove the notification." />
      <item value="GET SIGNATURES" />
      <item value="* UAMP takes the first approach for a variety of reasons, but both are valid * options." />
      <item value="CONTENT STYLE PLAYABLE HINT" />
      <item value="CONTENT STYLE SUPPORTED" />
      <item value="// Verify that things aren't ... broken. (This test should always pass.)" />
      <item value="utilized" />
      <item value="artwork" />
      <item value="genre" />
      <item value="* The compilation status of the media." />
      <item value="truncated" />
      <item value="NOTIFICATION CHANNEL" />
      <item value="* &lt;p&gt;Note that calling this method does &lt;em&gt;not&lt;/em&gt; put the service in the started state * itself, even though the name sounds like it. You must always call * {@link #startService(Intent)} first to tell the system it should keep the service running, * and then use this method to tell it to keep it running harder.&lt;/p&gt;" />
      <item value="* {@link #startForeground} if killing your service would be disruptive to the user, such as * if your service is performing background music playback, so the user * would notice if their music stopped playing." />
      <item value="set Ongoing" />
      <item value="* Set this flag if you would only like the sound, vibrate * and ticker to be played if the notification is not already showing." />
      <item value="* Notification visibility: Do not reveal any part of this notification on a secure lockscreen." />
      <item value="* Notification visibility: Show this notification on all lockscreens, but conceal sensitive or * private information on secure lockscreens." />
      <item value="* &lt;p&gt;If you are using this style, consider using the corresponding styles like * {@link androidx.media.R.style#TextAppearance_Compat_Notification_Media} or * {@link" />
      <item value="* corresponding custom views to display." />
      <item value="&gt;Instead of providing a media notification that is completely custom, a developer can set * this style and still obtain system decorations like the notification header with the expand * affordance and actions." />
      <item value="Prior" />
      <item value="Requests up to 3 actions (by index in the order of addition) to be shown in the compact * notification view." />
      <item value="* @param actions the indices of the actions to show in the compact notification view" />
      <item value="meda data" />
      <item value="invalidate Media Session Metadata" />
      <item value="on Position Discontinuity" />
      <item value="* This may look strange, but the documentation for [Service.startForeground] * notes that &quot;calling this method does *not* put the service in the started * state itself, even though the name sounds like it.&quot;" />
      <item value="strange" />
      <item value="* @deprecated This flag is no longer used. All media sessions are expected to handle media * button events now. For backward compatibility, this flag will be always set." />
      <item value="// If the results are not ready, the service must &quot;detach&quot; the results before // the method returns. After the source is ready, the lambda above will run, // and the caller will be notified that the results are ready. // // See [MediaItemFragmentViewModel.subscriptionCallback] for how this is passed to the // UI/displayed in the [RecyclerView]." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="279" />
        <entry key="ENGLISH" value="280" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="SWEDISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="4b8c0dd3e2395c8d" />
      </youdao-translate>
    </option>
  </component>
</application>